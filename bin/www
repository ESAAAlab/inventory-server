/**
 * Module dependencies.
 */

import app from '../index'
import http from 'http'
import express from 'express'
var debug = require('debug')('_example:server')

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.API_PORT || '3000')
app.set('port', port)


/* define webapp server and port */
var webappPort = normalizePort(process.env.WEBAPP_PORT || '3050')

var webapp = express()
var serveStatic = require('serve-static')

webapp.use(serveStatic('www', {'index': ['index.html']}))
webapp.listen(webappPort)

/**
 * Create HTTP server.
 */
var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('API listening on ' + bind)
  console.log('API listening on ' + bind)
}
